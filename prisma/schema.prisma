generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id             String   @id() @default(uuid())
  name           String   @db.VarChar
  email          String   @unique() @db.VarChar
  password       String   @db.VarChar
  preferences    String?  @db.VarChar
  avatar         String?  @db.VarChar
  address        address[] 
  credit_card    creditCard[]
  token userTokens?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
}

model userTokens {
  id String @id() @default(uuid())
  token String @default(uuid())
  user users? @relation(fields: [user_Id], references: [id])
  user_Id String? 
  created_at     DateTime @default(now()) @db.Timestamp(6)

  @@unique([id, user_Id])

}

model address{
  id	String @id() @default(uuid())
  street	String @db.VarChar()
  number	String @db.VarChar()
  state	String @db.VarChar(2)
  city	String @db.VarChar()
  post_code	String @db.VarChar(8)
  user_Id String?
  user users? @relation(fields: [user_Id], references: [id])
  merchant_Id String?
  merchant merchants? @relation(fields: [merchant_Id], references: [id])
  order order?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
}

model creditCard{
  id	String @id() @default(uuid())
  card_number	String @db.VarChar()
  holder_name	String @db.VarChar()
  cvv_code	String @db.VarChar()
  expiration_date	String @db.VarChar()
  user_id	String
  user users @relation(fields: [user_id], references: [id])
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  
}

model merchantTokens {
  id String @id() @default(uuid())
  token String @default(uuid())
  merchant_Id String? 
  merchant merchants? @relation(fields: [merchant_Id], references: [id])
  created_at     DateTime @default(now()) @db.Timestamp(6)

  @@unique([id, merchant_Id])

}

model merchants{
  id	String @id() @default(uuid())
  name String @db.VarChar()
  cnpj String @unique() @db.VarChar()
  email String @unique() @db.VarChar()
  token merchantTokens?
  password String @db.VarChar()
  address address[]
  product product?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
}

model product{
  id	String @id() @default(uuid())
  name String @db.VarChar()
  imageUrl String @db.VarChar()
  price Float @db.DoublePrecision()
  category_id String
  category category @relation(fields: [category_id], references: [id])
  merchant_id String
  merchant merchants @relation(fields: [merchant_id], references: [id])
}

model category{
  id	String @id() @default(uuid())
  name String @unique() @db.VarChar()
  productCategory String @db.VarChar()
  product product?  
}

model payments{
  id	String @id() @default(uuid())
  method paymentsMethod
  value Float @db.DoublePrecision()
  status String @db.VarChar()
  requisite String @db.Text()
  order order?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
}

model order{
  id	String @id() @default(uuid())
  name String @db.VarChar()
  orderType orderType
  status statusOrder
  items String @db.Text()
  benefitis String @db.Text()
  total String @db.Text()
  payments_id String
  payments payments @relation(fields: [payments_id], references: [id])
  address_id String
  address address @relation(fields: [address_id], references: [id])
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)

}

enum paymentsMethod  {
  card
  cash
}
enum orderType {
  delivery
  takeout
  signature
}
enum statusOrder {
  pending
  confirmed
  dispatched
  ready_to_pickup
  concluded
  canceled
}


